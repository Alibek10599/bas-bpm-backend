services:
  reservations:
    build:
      context: .
      dockerfile: ./apps/reservations/Dockerfile
      target: development
    command: pnpm run start:dev reservations
    env_file:
      - ./apps/reservations/.env
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: pnpm run start:dev auth
    env_file:
      - ./apps/auth/.env
    ports:
      - '3001:3001'
    volumes:
      - .:/usr/src/app
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    command: pnpm run start:dev notifications
    env_file:
      - ./apps/notifications/.env
    ports:
      - '3002:3002'
    volumes:
      - .:/usr/src/app
    networks:
      - bas-bpm
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  mongo:
    image: mongo
    networks:
      - bas-bpm
    container_name: bas-mongodb

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - '9010:9000' # S3 API
      - '9011:9001' # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
  rabbitmq:
    image: rabbitmq:3-management
    container_name: bas-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - '5672:5672' # AMQP
      - '15672:15672' # Management UI
    networks:
      - bas-bpm
    healthcheck:
      test: ['CMD-SHELL', 'rabbitmqctl status']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: bas-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-bas_bpm}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bas-bpm

volumes:
  minio_data:
  redis_data:
  postgres_data:

networks:
  bas-bpm:
