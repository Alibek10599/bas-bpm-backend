services:
  ws-gateway:
    build:
      context: .
      dockerfile: ./apps/ws-gateway/Dockerfile
      target: development
    command: pnpm run start:dev ws-gateway
    env_file:
      - ./apps/ws-gateway/.env
    ports:
      - '8080:8080'
    networks:
      - bas-bpm
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  reservations:
    build:
      context: .
      dockerfile: ./apps/reservations/Dockerfile
      target: development
    command: pnpm run start:dev reservations
    env_file:
      - ./apps/reservations/.env
    ports:
      - '3000:3000'
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: pnpm run start:dev auth
    env_file:
      - ./apps/auth/.env
    ports:
      - '3001:3001'
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    command: pnpm run start:dev notifications
    env_file:
      - ./apps/notifications/.env
    ports:
      - '3002:3002'
    networks:
      - bas-bpm
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  file-management:
    build:
      context: .
      dockerfile: ./apps/file-management/Dockerfile
      target: development
    command: pnpm run start:dev file-management
    env_file:
      - ./apps/file-management/.env
    ports:
      - '3003:3003'
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started

  tasks:
    build:
      context: .
      dockerfile: ./apps/tasks/Dockerfile
      target: development
    command: pnpm run start:dev tasks
    env_file:
      - ./apps/tasks/.env
    ports:
      - '3004:3004'
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  references:
    build:
      context: .
      dockerfile: ./apps/references/Dockerfile
      target: development
    command: pnpm run start:dev references
    env_file:
      - ./apps/references/.env
    ports:
      - '3005:3005'
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  code-execution:
    build:
      context: .
      dockerfile: ./apps/code-execution/Dockerfile
      target: development
    command: pnpm run start:dev code-execution
    env_file:
      - ./apps/code-execution/.env
    ports:
      - '3006:3006'
    networks:
      - bas-bpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  mongo:
    image: mongo
    networks:
      - bas-bpm

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    networks:
      - bas-bpm
    volumes:
      - minio_data:/data

  postgres:
    image: postgres:16-alpine
    restart: always
    container_name: bas-postgres
    environment:
      POSTGRES_DB: bas_bpm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - bas-bpm
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: bas-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - '5672:5672'   # AMQP
      - '15672:15672' # Management UI
    networks:
      - bas-bpm
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: bas-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - bas-bpm
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  onlyoffice-documentserver:
    image: onlyoffice/documentserver
    container_name: onlyoffice-documentserver
    ports:
      - "8081:80"
    restart: always
    environment:
      - JWT_SECRET=my_jwt_secret
    networks:
      - bas-bpm

volumes:
  minio_data:
  pgdata:
  redis_data:

networks:
  bas-bpm: